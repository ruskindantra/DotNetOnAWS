{
  "Resources": {
    "localweathercluster2739CF22": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "localweathercluster"
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Resource"
      }
    },
    "localweatherclusterVpc030C0173": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/Resource"
      }
    },
    "localweatherclusterVpcPublicSubnet1SubnetBA6E41AB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1/Subnet"
      }
    },
    "localweatherclusterVpcPublicSubnet1RouteTableC4A60F81": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1/RouteTable"
      }
    },
    "localweatherclusterVpcPublicSubnet1RouteTableAssociationFE5744E7": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPublicSubnet1RouteTableC4A60F81"
        },
        "SubnetId": {
          "Ref": "localweatherclusterVpcPublicSubnet1SubnetBA6E41AB"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1/RouteTableAssociation"
      }
    },
    "localweatherclusterVpcPublicSubnet1DefaultRouteDF30503F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPublicSubnet1RouteTableC4A60F81"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "localweatherclusterVpcIGW133602EC"
        }
      },
      "DependsOn": [
        "localweatherclusterVpcVPCGW88A957DF"
      ],
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1/DefaultRoute"
      }
    },
    "localweatherclusterVpcPublicSubnet1EIP4B8FB59C": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1/EIP"
      }
    },
    "localweatherclusterVpcPublicSubnet1NATGateway70960D9C": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "localweatherclusterVpcPublicSubnet1SubnetBA6E41AB"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "localweatherclusterVpcPublicSubnet1EIP4B8FB59C",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet1/NATGateway"
      }
    },
    "localweatherclusterVpcPublicSubnet2SubnetA48D1F42": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2/Subnet"
      }
    },
    "localweatherclusterVpcPublicSubnet2RouteTable0AF79ABB": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2/RouteTable"
      }
    },
    "localweatherclusterVpcPublicSubnet2RouteTableAssociation9D5F0C27": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPublicSubnet2RouteTable0AF79ABB"
        },
        "SubnetId": {
          "Ref": "localweatherclusterVpcPublicSubnet2SubnetA48D1F42"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2/RouteTableAssociation"
      }
    },
    "localweatherclusterVpcPublicSubnet2DefaultRoute27186AD5": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPublicSubnet2RouteTable0AF79ABB"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "localweatherclusterVpcIGW133602EC"
        }
      },
      "DependsOn": [
        "localweatherclusterVpcVPCGW88A957DF"
      ],
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2/DefaultRoute"
      }
    },
    "localweatherclusterVpcPublicSubnet2EIP290B3171": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2/EIP"
      }
    },
    "localweatherclusterVpcPublicSubnet2NATGateway2971986D": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "localweatherclusterVpcPublicSubnet2SubnetA48D1F42"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "localweatherclusterVpcPublicSubnet2EIP290B3171",
            "AllocationId"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PublicSubnet2/NATGateway"
      }
    },
    "localweatherclusterVpcPrivateSubnet1Subnet66C24F85": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet1/Subnet"
      }
    },
    "localweatherclusterVpcPrivateSubnet1RouteTable6E0B532F": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet1/RouteTable"
      }
    },
    "localweatherclusterVpcPrivateSubnet1RouteTableAssociation182E04A4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPrivateSubnet1RouteTable6E0B532F"
        },
        "SubnetId": {
          "Ref": "localweatherclusterVpcPrivateSubnet1Subnet66C24F85"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet1/RouteTableAssociation"
      }
    },
    "localweatherclusterVpcPrivateSubnet1DefaultRoute6A744700": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPrivateSubnet1RouteTable6E0B532F"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "localweatherclusterVpcPublicSubnet1NATGateway70960D9C"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet1/DefaultRoute"
      }
    },
    "localweatherclusterVpcPrivateSubnet2SubnetF7329B58": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.192.0/18",
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet2/Subnet"
      }
    },
    "localweatherclusterVpcPrivateSubnet2RouteTable8F73CFCA": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet2/RouteTable"
      }
    },
    "localweatherclusterVpcPrivateSubnet2RouteTableAssociation06773035": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPrivateSubnet2RouteTable8F73CFCA"
        },
        "SubnetId": {
          "Ref": "localweatherclusterVpcPrivateSubnet2SubnetF7329B58"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet2/RouteTableAssociation"
      }
    },
    "localweatherclusterVpcPrivateSubnet2DefaultRouteAC7E9C94": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "localweatherclusterVpcPrivateSubnet2RouteTable8F73CFCA"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "localweatherclusterVpcPublicSubnet2NATGateway2971986D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/PrivateSubnet2/DefaultRoute"
      }
    },
    "localweatherclusterVpcIGW133602EC": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "LocalWeatherApiCdkStack/localweathercluster/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/IGW"
      }
    },
    "localweatherclusterVpcVPCGW88A957DF": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        },
        "InternetGatewayId": {
          "Ref": "localweatherclusterVpcIGW133602EC"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathercluster/Vpc/VPCGW"
      }
    },
    "localweathersvcLB38F7B5CF": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false"
          }
        ],
        "Name": "localweatherelb",
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "localweathersvcLBSecurityGroup5D3D3BDD",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "localweatherclusterVpcPublicSubnet1SubnetBA6E41AB"
          },
          {
            "Ref": "localweatherclusterVpcPublicSubnet2SubnetA48D1F42"
          }
        ],
        "Type": "application"
      },
      "DependsOn": [
        "localweatherclusterVpcPublicSubnet1DefaultRouteDF30503F",
        "localweatherclusterVpcPublicSubnet2DefaultRoute27186AD5"
      ],
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/LB/Resource"
      }
    },
    "localweathersvcLBSecurityGroup5D3D3BDD": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB LocalWeatherApiCdkStacklocalweathersvcLB46799333",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/LB/SecurityGroup/Resource"
      }
    },
    "localweathersvcLBSecurityGrouptoLocalWeatherApiCdkStacklocalweathersvcServiceSecurityGroup350025AE8099A74CCA": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "localweathersvcLBSecurityGroup5D3D3BDD",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "localweathersvcServiceSecurityGroup42813B4D",
            "GroupId"
          ]
        },
        "FromPort": 80,
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/LB/SecurityGroup/to LocalWeatherApiCdkStacklocalweathersvcServiceSecurityGroup350025AE:80"
      }
    },
    "localweathersvcLBPublicListener60581645": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "localweathersvcLBPublicListenerECSGroup8D060C57"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "localweathersvcLB38F7B5CF"
        },
        "Port": 80,
        "Protocol": "HTTP"
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/LB/PublicListener/Resource"
      }
    },
    "localweathersvcLBPublicListenerECSGroup8D060C57": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckPath": "/localweather",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/LB/PublicListener/ECSGroup/Resource"
      }
    },
    "localweathersvcTaskDefTaskRoleAC928596": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/TaskDef/TaskRole/Resource"
      }
    },
    "localweathersvcTaskDefAB4E9E79": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ".dkr.ecr.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/localweather:latest"
                ]
              ]
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "localweathersvcTaskDefwebLogGroup3FBE615D"
                },
                "awslogs-stream-prefix": "localweathersvc",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Name": "web",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "localweathersvcTaskDefExecutionRole0A40A6BC",
            "Arn"
          ]
        },
        "Family": "LocalWeatherApiCdkStacklocalweathersvcTaskDef46AE882A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "localweathersvcTaskDefTaskRoleAC928596",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/TaskDef/Resource"
      }
    },
    "localweathersvcTaskDefwebLogGroup3FBE615D": {
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/TaskDef/web/LogGroup/Resource"
      }
    },
    "localweathersvcTaskDefExecutionRole0A40A6BC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/TaskDef/ExecutionRole/Resource"
      }
    },
    "localweathersvcTaskDefExecutionRoleDefaultPolicy44B6163A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":repository/localweather"
                  ]
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "localweathersvcTaskDefwebLogGroup3FBE615D",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "localweathersvcTaskDefExecutionRoleDefaultPolicy44B6163A",
        "Roles": [
          {
            "Ref": "localweathersvcTaskDefExecutionRole0A40A6BC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/TaskDef/ExecutionRole/DefaultPolicy/Resource"
      }
    },
    "localweathersvcService2E1B2B72": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "localweathercluster2739CF22"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50
        },
        "DesiredCount": 3,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": [
          {
            "ContainerName": "web",
            "ContainerPort": 80,
            "TargetGroupArn": {
              "Ref": "localweathersvcLBPublicListenerECSGroup8D060C57"
            }
          }
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "localweathersvcServiceSecurityGroup42813B4D",
                  "GroupId"
                ]
              }
            ],
            "Subnets": [
              {
                "Ref": "localweatherclusterVpcPrivateSubnet1Subnet66C24F85"
              },
              {
                "Ref": "localweatherclusterVpcPrivateSubnet2SubnetF7329B58"
              }
            ]
          }
        },
        "ServiceName": "localweathersvc",
        "TaskDefinition": {
          "Ref": "localweathersvcTaskDefAB4E9E79"
        }
      },
      "DependsOn": [
        "localweathersvcLBPublicListenerECSGroup8D060C57",
        "localweathersvcLBPublicListener60581645"
      ],
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/Service/Service"
      }
    },
    "localweathersvcServiceSecurityGroup42813B4D": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "LocalWeatherApiCdkStack/localweathersvc/Service/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "localweatherclusterVpc030C0173"
        }
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/Service/SecurityGroup/Resource"
      }
    },
    "localweathersvcServiceSecurityGroupfromLocalWeatherApiCdkStacklocalweathersvcLBSecurityGroupC550F5A080F064BE4D": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "localweathersvcServiceSecurityGroup42813B4D",
            "GroupId"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "localweathersvcLBSecurityGroup5D3D3BDD",
            "GroupId"
          ]
        },
        "ToPort": 80
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/localweathersvc/Service/SecurityGroup/from LocalWeatherApiCdkStacklocalweathersvcLBSecurityGroupC550F5A0:80"
      }
    },
    "dotnetonawslocalweatherapiurl23927539": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "localweathersvcLB38F7B5CF",
                  "DNSName"
                ]
              },
              "/"
            ]
          ]
        },
        "Description": "URL for the LocalWeather API. Used by the OldWebApp MVC project to be hosted on BeanStalk",
        "Name": "/dotnetonaws/localweatherapi/url"
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/--dotnetonaws--localweatherapi--url/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAACn1STW/bMAz9Lb0rSr1h2GnAUjcrAhSZ4QS5KwrrqrElQ6RSBIb/+yjZSdxuGHTQ4+PXI6VMZtk3eX/3U73jTB+O8047D7LbkNJHUQK64DWI/MX+DtQGErmzSD5oitzUz46DIeNsL2KtDrSXJbQODTl/flAIAjTKLq8DEviUMsJfyleKYKvw+AgvxqYyMeAz4ywpY8FPuDF3A/5kBiEj7LndF9ntWh3JXZGLIuxrozdhbyGpv6HShdh+X8ONv3ELRKeNuohKjgiWqyJea0VPrOBdnUXhzSmKuRZeWZ6P8SVgUDJaC+IlvzZgSWxAB2/o/ORdaIch/kcsKw+If9Erm/g4Oc5aRbE3ykXb8thJ/rNThwdVK6vh8GlxUCsko2uO2KcIY6sT7+/f2en5PtjTOMOvaseYC574t9yZV3KZbGL2wqhGdqUbHiLdheO8tLkB9aJ2Ff+jZ1ddS1xwLxCb+Hk9qy+UVw2MX+1q9H0vHh2tgeZfZSaz73O5Xm5z/vSscLYDj6zwx4l980zex3P3hsbMfLBkGpDlcP8B5P15GjgDAAA="
      },
      "Metadata": {
        "aws:cdk:path": "LocalWeatherApiCdkStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "localweathersvcLoadBalancerDNSDE2E62AF": {
      "Value": {
        "Fn::GetAtt": [
          "localweathersvcLB38F7B5CF",
          "DNSName"
        ]
      }
    },
    "localweathersvcServiceURL1FA51A92": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "localweathersvcLB38F7B5CF",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  }
}